Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/28/23 22:35:49
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Fernando I. Rodriguez-Estrada	 
				; Last Modified: 5/27/2023
				; OSU email address: rodrifer@oregonstate.edu
				; Course number/section:   CS271 Section 40X
				; Project Number: 5	           Due Date: 5/28/2023
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				printNum MACRO num
					PUSH	EAX
					MOV		EAX, num
					call	WriteDec	
					POP		EAX 

				ENDM

				;-----------------------------------------------------------------
				; Name: sourceElToEAX 
				; 
				; Moves element held in the first index of random array into EAX
				; 
				; Preconditions: NA
				;
				; recieves: NA

				; returns: currEl
				;-----------------------------------------------------------------

				sourceElementToEAX MACRO median
					MOV		EAX, [ESI]
					MOV		currEl, EAX

				ENDM


				; MACROS

				;-----------------------------------------------------------------
				; Name: printElement 
				; 
				; prints the element along with a space.
				; 
				; Preconditions: address of index is passed as an argument.
				;
				; recieves
				; median = median element 

				; returns: NA
				;-----------------------------------------------------------------

				printMedian MACRO median
					  .data
					MedianMessage		BYTE	"The median value of the array: ", 0	
				      .code

				_printMedianMessage:
					MOV		EDX, OFFSET MedianMessage
					call	WriteString

				_printMedian:
					MOV		EAX, median
					call	WriteDec
					call	CrlF

				ENDM

				printTestArray MACRO
					PUSHAD

					PUSH	ARRAYSIZE
					PUSH	OFFSET testArray
					call	displayArray	
					call	CrlF

					POPAD
				ENDM


				;-----------------------------------------------------------------
				; Name: setZero
				;
				; sets the input to zero.
				; 
				; Preconditions: desired zero is passed as an argument.
				;
				; recieves
				; num = number to set to zero.
				;
				; returns: NA
				;-----------------------------------------------------------------

				setZero MACRO num 

					PUSH	EBX
					MOV		EBX, 0	
					MOV		num, EBX
					POP		EBX
					
				ENDM

				;-----------------------------------------------------------------
				; Name: printElement 
				; 
				; prints the element along with a space.
				; 
				; Preconditions: address of index is passed as an argument.
				;
				; recieves
				; indexAddress = address of index.
				;
				; returns: NA
				;-----------------------------------------------------------------

				printElement MACRO element

					MOV		EAX, element
					call	WriteDec	

					MOV		EDX, OFFSET space
					call	Writestring


				ENDM

				;-----------------------------------------------------------------
				; Name: printSpace
				; 
				; prints the element along with a space.
				; 
				; Preconditions: address of index is passed as an argument.
				;
				; recieves
				; indexAddress = address of index.
				;
				; returns: NA
				;-----------------------------------------------------------------

				printSpace MACRO 

					PUSH	EDX
					MOV		EDX, OFFSET space
					call	Writestring
					POP		EDX

				ENDM



				printSortedArray MACRO inputArray

					ARRAYSIZE = 200

					.data
					 inputArray DWORD randomElements
						
					.code
						PUSH	OFFSET randomElements
						call	gnomeSort

						PUSH	OFFSET randomElements
						PUSH	ARRAYSIZE
						call	displayArray

				ENDM

 = 00000014			ROW_LENGTH = 20

				; fillArray PROC
 = 00000014			LO = 20
 = 0000001E			HI = 30
 = 000000C8			ARRAYSIZE =	200 

				; (insert constant definitions here)

 00000000			.data

 00000000 0000000C		testArray				DWORD		12, 3, 34, 5, 7, 3, 43, 32,12 , 34, 2,2 ,3, 82,3, 34
	   00000003
	   00000022
	   00000005
	   00000007
	   00000003
	   0000002B
	   00000020
	   0000000C
	   00000022
	   00000002
	   00000002
	   00000003
	   00000052
	   00000003
	   00000022
 00000040 00000010		testArrayLength		    DWORD       LENGTHOF testArray  
 00000044 00000000		rowIndex				DWORD		?	
 00000048 4E 6F 00		no						BYTE		"No", 0
 0000004B 79 65 73 00		yes						BYTE		"yes",	0


				; displayArray
 0000004F 00000014		rowLength				DWORD		20
 00000053 00000000		numberRows				DWORD		?
 00000057 00000020		space					DWORD		' ', 0
	   00000000
 0000005F 00000000		inputArrayOFFSET		DWORD		?
 00000063 00000001		currentRowLength		DWORD		1
 00000067 00000000		inputArrayLength		DWORD		?

				; fillArray
 0000006B  000000C8 [		randomElements			DWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000038B 00000000		randomElementsIndex		DWORD		?

				; exchangeElements	
 0000038F 00000000		tempIndex				DWORD		? 
 00000393 00000000		tempValue				DWORD		?

				; gnomeSort
 00000397 00000000		originalArrayOFFSET		DWORD		?
 0000039B 00000000		lastArrayIndex			DWORD		?

				; displayMedian	
 0000039F 00000000		medianOFFSET			DWORD		?
 000003A3 00000000		medianElement			DWORD		? 

				; countList		
 000003A7  000000C8 [		counts			DWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 000006C7 00000000		elFrequenciesLength		DWORD		?
 000006CB 00000000		elFrequenciesOFFSET		DWORD		?
 000006CF 00000001		currElFrequencies		DWORD		1
 000006D3 00000001		currIndex				DWORD		1
 000006D7 00000000		currEl					DWORD		?
 000006DB 00000000		randomElOFFSET			DWORD		?
 000006DF 00000000		currElFrequency			DWORD		?

				; procName
 000006E3 47 65 6E 65 72	procTitle				BYTE		"Generating, Sorting, and Counting Random Integers!					By Feranndo I Rodriguez-Estrada", 0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 21
	   09 09 09 09 09
	   42 79 20 46 65
	   72 61 6E 6E 64
	   6F 20 49 20 52
	   6F 64 72 69 67
	   75 65 7A 2D 45
	   73 74 72 61 64
	   61 00
 0000073A 54 68 69 73 20	programInstructions		BYTE		"This porgram generates a list of 200 random integers between 15 and 50, inclusive. It then displays the orginal", 
	   70 6F 72 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 61 20
	   6C 69 73 74 20
	   6F 66 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 49 74
	   20 74 68 65 6E
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6F
	   72 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6D 65 64
	   69 61 6E 20 6F
	   66 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 61 6E 64
	   20 66 69 6E 61
	   6C 6C 79 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   76 61 6C 75 65
	   2C 20 73 74 61
	   72 74 69 6E 67
	   20 77 69 74 68
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   6C 6F 77 65 73
	   74 2E
													" list, sorts the list, displays the median of the list, displays the list sorted in ascending order, and finally displays the number of instances of each generated value, starting with the number of lowest."

				; titles
 00000877 59 6F 75 72 20	unsortedTitle			BYTE		"Your unsorted random number: ", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000895 59 6F 75 72 20	sortedTitle				BYTE		"Your sorted randome numbers: ", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 65 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 000008B3 59 6F 75 72 20	instancesTitle			BYTE		"Your list of indances of each generated number, starting with the smallest value:", 13, 10, 13, 10, 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   64 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   6E 75 6D 62 65
	   72 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   20 73 6D 61 6C
	   6C 65 73 74 20
	   76 61 6C 75 65
	   3A 0D 0A 0D 0A
	   00
 00000909 47 6F 6F 64 62	goodBye					BYTE		"Goodbye, and thanks for using my program!", 0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00

 00000000			.code
 00000000			main PROC

 00000000  E8 00000097			call	introduction	

 00000005			_getRandomArray:
 00000005  E8 00000000 E		call	Randomize
 0000000A  E8 00000122			call	fillArray

 0000000F			_displayRandomArrayTitle:
 0000000F  BA 00000877 R		MOV		EDX, OFFSET unsortedTitle
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	CrlF
					
 0000001E			_displayRandomArray:
 0000001E  68 0000006B R		PUSH	OFFSET randomElements
 00000023  68 000000C8			PUSH	ARRAYSIZE
 00000028  E8 00000126			call	displayArray

 0000002D			_sortRandomArray:
 0000002D  68 0000006B R		PUSH	OFFSET randomElements
 00000032  E8 0000008E			call	gnomeSort

 00000037			_displaySortedTitle:
 00000037  BA 00000895 R		MOV		EDX, OFFSET sortedTitle
 0000003C  E8 00000000 E		call	WriteString
 00000041  E8 00000000 E		call	CrlF
 00000046			_displaySortedArray:	
 00000046  68 0000006B R		PUSH	OFFSET randomElements
 0000004B  68 000000C8			PUSH	ARRAYSIZE
 00000050  E8 000000FE			call	displayArray

 00000055			_displayMedian:
 00000055  68 0000006B R	 	PUSH	OFFSET randomElements
 0000005A  E8 00000169			call	displayMedian

 0000005F			_displayFrequencies:
 0000005F  68 0000006B R		PUSH	OFFSET randomElements
 00000064  68 000003A7 R		PUSH	OFFSET counts
 00000069  E8 000001AB			call	countList

 0000006E			_displayFreqencyArar:
 0000006E  FF 35 000006CB R		PUSH	elFrequenciesOFFSET	
 00000074  6A 0B			PUSH	11
 00000076  E8 000000D8			call	displayArray

 0000007B			_displayGoodByeMessage:
 0000007B  BA 00000909 R		MOV		EDX, OFFSET goodBye
 00000080  E8 00000000 E		call	WriteString
					

					Invoke ExitProcess,0	; exit to operating system
 00000085  6A 00	   *	    push   +000000000h
 00000087  E8 00000000 E   *	    call   ExitProcess
 0000008C			main ENDP

				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: procedureName
				;
				; Description:
				;
				; Preconditions:
				;
				; Postconditions:
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 0000008C			testProc PROC

 0000008C			_displayFrequencies:
 0000008C  68 0000006B R		PUSH	OFFSET randomElements
 00000091  68 000003A7 R		PUSH	OFFSET counts
 00000096  E8 0000017E			call	countList

 0000009B  C3			RET
 0000009C			testPROC ENDP

				; ---------------------------------------------------------------------------------
				; Name: procedureName
				;
				; Description:
				;
				; Preconditions:
				;
				; Postconditions:
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 0000009C			introduction PROC

 0000009C  BA 000006E3 R		MOV		EDX, OFFSET procTitle
 000000A1  E8 00000000 E		call	WriteString
 000000A6  E8 00000000 E		call	CrlF
 000000AB  E8 00000000 E		call	CrlF

 000000B0  BA 0000073A R		MOV		EDX, OFFSET programInstructions
 000000B5  E8 00000000 E		call	WriteString
 000000BA  E8 00000000 E		call	CrlF
 000000BF  E8 00000000 E		call	CrlF

 000000C4  C3			RET
 000000C5			introduction ENDP


				; ---------------------------------------------------------------------------------

				; Description: implement gnome sorting algorithm.
				;
				; Preconditions: OFFSET inputArray is pushed the runtime stack.
				;
				; Postconditions: 
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 000000C5			gnomeSort PROC
 000000C5			_storeRegisters:
 000000C5  54				PUSH	ESP
 000000C6  55				PUSH	EBP
 000000C7  8B EC			MOV		EBP, ESP

 000000C9			_accesArgument:
 000000C9  8B 7D 0C			MOV		EDI, [EBP+12]
 000000CC  89 3D 00000397 R		MOV		originalArrayOFFSET, EDI

 000000D2			_lastArrayIndexToESI:
 000000D2  8B 35 00000397 R			MOV		ESI, originalArrayOFFSET
						
 000000D8  53					PUSH	EBX 
				;-------------------------------------------------
				;	ESI = ARRAYSIZE * 4 + originalArrayOFFSSET
				; -------------------------------------------------
 000000D9  BB 000000C8				MOV		EBX, ARRAYSIZE
 000000DE  8B C3				MOV		EAX, EBX
 000000E0  B8 00000004				MOV		EAX, 4
 000000E5  F7 E3				MUL		EBX 
 000000E7  8B D8				MOV		EBX, EAX
 000000E9  03 F3				ADD		ESI, EBX
 000000EB  89 35 0000039B R			MOV		lastArrayIndex, ESI
 000000F1  83 2D 0000039B R			SUB		lastArrayIndex, 4
	   04

 000000F8  5B					POP		EBX 
					
 000000F9			_iterateSortAlgorithm:

					; ---------------------------------------------
					; if ESI == 0: ESI += 4
					; else: continue 
					; ---------------------------------------------
 000000F9				_incrementZeroIndex:
 000000F9  3B 3D 00000397 R			CMP		EDI, originalArrayOFFSET
 000000FF  75 03				JNE		_cmpTwinIndices	
 00000101  83 C7 04				ADD		EDI, 4
 00000104				_cmpTwinIndices:
						
 00000104					_configureIndexDecrement:
 00000104  8B C7					MOV		EAX, EDI
 00000106  83 E8 04					SUB		EAX, 4						; EAX = currIndex - 4

 00000109					_cmpElementSizes:
 00000109  8B 1F					MOV		EBX, [EDI]
 0000010B  39 18					CMP		[EAX], EBX
 0000010D  7E 0E					JLE		_incrmentIndex	

 0000010F					_swapElements:
 0000010F  60						PUSHAD
 00000110  50						PUSH	EAX
 00000111  57						PUSH	EDI	
 00000112  E8 00000096					call	exchangeElements
 00000117  61						POPAD
					
 00000118  83 EF 04					SUB		EDI, 4
 0000011B  EB 07					JMP		_continue
 0000011D					_incrmentIndex:		
 0000011D  8B C7					MOV		EAX, EDI
 0000011F  83 C7 04					ADD		EDI, 4
 00000122  8B C7					MOV		EAX, EDI


 00000124				_continue:
 00000124					_cmpLastIndex:
							; ----------------------------------------------
							; if currenIndex < finalIndex: JMP _iterateSortAlgorithm 
							; ----------------------------------------------
 00000124  39 3D 0000039B R				CMP		lastArrayIndex, EDI
 0000012A  7D CD					JGE		_iterateSortAlgorithm

 0000012C				_finish:	
 0000012C  5D				POP		EBP
 0000012D  5C				POP		ESP
 0000012E  C2 0004		RET	4
 00000131			gnomeSort ENDP


				; ---------------------------------------------------------------------------------
				; Name: fillArray		
				;
				; Description: fills the array with random elements between the two specified bounds
				;
				; Preconditions: LO, HI, and ARRAY_SIZE are declared in the data segment
				; array address is declared in .data, and arrayAddress OFFSET is pushed to the PROC. 
				; Registers modified: EAX, ECX, and ESI.
				;
				; Postconditions: EAX is modified; new array holds values
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 00000131			fillArray PROC	

 00000131  BE 0000006B R		MOV		ESI, OFFSET randomElements			; ESI = index of randomElements
 00000136  B9 000000C8			MOV		ECX, ARRAYSIZE	
 0000013B			_appendElements:
				; --------------------------
				; get randomNumber betweenm [LO, HI]
				; EAX = randomeNumber
				; --------------------------
 0000013B			_getRandomNumber:
 0000013B  B8 0000001E			MOV		EAX, HI
 00000140  40				INC		EAX
 00000141  E8 00000000 E		call	RandomRange
					; if randomNumber < LO: JMP _getRandomNumber
 00000146  83 F8 14			CMP		EAX, LO	
 00000149  72 F0			JB		_getRandomNumber					; EAX = randomNumber

				; --------------------------
				; add element to randomElements Array 
				; --------------------------
 0000014B			_addElementToArray:	
 0000014B  89 06			MOV		[ESI], EAX							; randomElements[ESI] = randomNumebr
 0000014D  83 C6 04			ADD		ESI, 4
 00000150  E2 E9			LOOP	_appendElements

 00000152  C3			RET
 00000153			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: procedureName
				;
				; Description: Prints 20 elements per row.
				;
				; Preconditions: array OFFSET and array length are pushed to stack, respectively.
				;
				; Postconditions: ADBS Modified registers are EAX, EDI, EBX, and ESI	
				;
				; Returns: NA
				;
				; ---------------------------------------------------------------------------------
 00000153			displayArray PROC
 00000153  54				PUSH	ESP
 00000154  55				PUSH	EBP	
 00000155  8B EC			MOV		EBP, ESP

 00000157			_loadArrayRequirements:		
 00000157  8B 75 10			MOV		ESI, [EBP+16]				; ESI = inputArrayOFFSET
 0000015A  8B 4D 0C			MOV		ECX, [EBP+12]				; ECX = number of elements	
 0000015D  BB 00000014			MOV		EBX, ROW_LENGTH	

 00000162  BA 00000001			MOV		EDX, 1
 00000167  89 15 00000063 R		MOV		currentRowLength, EDX

						
							
 0000016D			_printIteratively:	

 0000016D  60				PUSHAD

 0000016E  8B 06			MOV		EAX, [ESI]
 00000170  E8 00000000 E		call	WriteDec	

 00000175  BA 00000057 R		MOV		EDX, OFFSET space
 0000017A  E8 00000000 E		call	Writestring
					
 0000017F  61				POPAD






				; 	printElement [ESI]	
 00000180  83 C6 04			ADD		ESI, 4
					
 00000183				_createNewLineConditionally:
 00000183  FF 05 00000063 R			INC		currentRowLength
 00000189  3B 1D 00000063 R			CMP		EBX, currentRowLength 
 0000018F  7D 10				JGE		_loopPrint 

 00000191  E8 00000000 E			call	CrLf			
 00000196  BA 00000001				MOV		EDX, 1
 0000019B  89 15 00000063 R			MOV		currentRowLength, EDX

					
 000001A1				_loopPrint:
 000001A1  E2 CA			LOOP	_printIteratively

 000001A3			_finish:	
 000001A3  E8 00000000 E		call	CrlF
 000001A8  5D				POP		EBP
 000001A9  5C				POP		ESP
					
 000001AA  C2 0008		RET		8
 000001AD			displayArray ENDP

 000001AD			exchangeElements PROC	
 000001AD  54				PUSH	ESP	
 000001AE  55				PUSH	EBP	
 000001AF  8B EC			MOV		EBP, ESP

 000001B1  8B 75 0C			MOV		ESI, [EBP+12]							; ESI = indexOne
 000001B4  8B 7D 10			MOV		EDI, [EBP+16]							; EDI = indexTwo

						; tempValue = [indexOne]

 000001B7			_useTemptsToSwitchElements:
 000001B7  60				PUSHAD

				; [indexOne], [indexTwo] = [IndexTwo], [indexOne]
 000001B8  8B 07			MOV		EAX, [EDI]
 000001BA  8B 1E			MOV		EBX, [ESI]
 000001BC  89 06			MOV		[ESI], EAX 
 000001BE  8B C3			MOV		EAX, EBX 
 000001C0  89 07			MOV		[EDI], EAX

 000001C2  61				POPAD

 000001C3  5D				POP		EBP
 000001C4  5C				POP		ESP
 000001C5  C2 0008		RET	8
 000001C8			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Description: prints the median.
				;
				; Preconditions: the desired arra OFFSET is pushed on to the stack. median is declared
				; in the .data segment.
				;
				; Postconditions:  
				;
				; Returns: NA
				;
				; ---------------------------------------------------------------------------------

 000001C8			displayMedian PROC
 000001C8  54				PUSH	ESP
 000001C9  55				PUSH	EBP
 000001CA  8B EC			MOV		EBP, ESP
 000001CC  8B 5C 24 0C			MOV		EBX, [ESP+12]

 000001D0  89 1D 00000397 R		MOV		originalArrayOFFSET, EBX

 000001D6			_divideARRAYSIZEbyTwoFlored:

				;----------------------------------------------------------
				; medianElement = floor(ARRAYSIZE/2) + 4*originalArrayOFFSET
				;----------------------------------------------------------
 000001D6  B8 000000C8			MOV		EAX, ARRAYSIZE
 000001DB  BA 00000000			MOV		EDX, 0
 000001E0  BB 00000002			MOV		EBX, 2
 000001E5  F7 F3			DIV		EBX
					
 000001E7  BB 00000004			MOV		EBX, 4
 000001EC  F7 E3			MUL		EBX
 000001EE  03 05 00000397 R		ADD		EAX, originalArrayOFFSET
					
 000001F4  8B 00			MOV		EAX, [EAX]
 000001F6  A3 000003A3 R		MOV		medianElement, EAX

					printMedian medianElement
 00000933		     1		  .data
 00000933 54 68 65 20 6D     1		MedianMessage		BYTE	"The median value of the array: ", 0	
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001FB		     1	      .code
 000001FB		     1	_printMedianMessage:
 000001FB  BA 00000933 R     1		MOV		EDX, OFFSET MedianMessage
 00000200  E8 00000000 E     1		call	WriteString
 00000205		     1	_printMedian:
 00000205  A1 000003A3 R     1		MOV		EAX, medianElement
 0000020A  E8 00000000 E     1		call	WriteDec
 0000020F  E8 00000000 E     1		call	CrlF

 00000214			_finsh:
 00000214  5D				POP		EBP
 00000215  5C				POP		ESP
 00000216  C2 0008		RET 8
 00000219			displayMedian ENDP

 00000219			countList PROC

 00000219			_displayCountTitle:
 00000219  E8 00000000 E		call	CrlF
 0000021E  BA 000008B3 R		MOV		EDX, OFFSET instancesTitle
 00000223  E8 00000000 E		call	WriteString
					
 00000228			_accessBasePointer:
 00000228  54				PUSH	ESP
 00000229  55				PUSH	EBP
 0000022A  8B EC			MOV		EBP, ESP

 0000022C			_initializeVariables:
 0000022C  8B 7D 0C			MOV		EDI, [EBP+12]							
 0000022F  8B 75 10			MOV		ESI, [EBP+16]	
 00000232  89 3D 000006CB R		MOV		elFrequenciesOFFSET, EDI
 00000238  89 35 000006DB R		MOV		randomElOFFSET, ESI 	
 0000023E  C7 05 000006DF R		MOV		currElFrequency, 0
	   00000000

 00000248  8B 06			MOV		EAX, [ESI]
 0000024A  83 C6 04			ADD		ESI, 4


 0000024D  8B 1E			MOV		EBX, [ESI]
 0000024F  89 1D 000006D7 R		MOV		currEl, EBX
					
				;-------------------------------------------------------
				; iterate throug the random array to count the array frequencies.
				;-------------------------------------------------------

 00000255			_annotateFrequency:
 00000255  3B 05 000006D7 R		CMP		EAX, currEl	
 0000025B  74 21			JE		_incrementCurrFrequency
						
 0000025D				_resetCurrFrequencyCount:

 0000025D					_appendElementToFreqCount:
 0000025D  53						PUSH EBX
 0000025E  8B 1D 000006DF R				MOV	EBX, currElFrequency
 00000264  89 1F					MOV	DWORD PTR [EDI], EBX	

 00000266  5B						POP EBX
 00000267  83 C7 04					ADD EDI, 4
						setZero		currElFrequency
 0000026A  53		     1		PUSH	EBX
 0000026B  BB 00000000	     1		MOV		EBX, 0	
 00000270  89 1D 000006DF R  1		MOV		currElFrequency, EBX
 00000276  5B		     1		POP		EBX
 00000277  A3 000006D7 R			MOV		currEl, EAX
 0000027C  EB 06				JMP		_continue
 0000027E				_incrementCurrFrequency:
 0000027E  FF 05 000006DF R			INC		currElFrequency
 00000284				_continue:
 00000284  83 C6 04			ADD		ESI, 4
 00000287  8B 06			MOV		EAX, [ESI]
					printSpace
 00000289  52		     1		PUSH	EDX
 0000028A  BA 00000057 R     1		MOV		EDX, OFFSET space
 0000028F  E8 00000000 E     1		call	Writestring
 00000294  5A		     1		POP		EDX

					;---------------------------------------------------
					; continue while end array not reached.
					;---------------------------------------------------
 00000295  3B 35 0000039B R		CMP		ESI, lastArrayIndex
 0000029B  7E B8			JLE		_annotateFrequency	

 0000029D			_appendLastElFrequency:

 0000029D  53						PUSH EBX
 0000029E  8B 1D 000006DF R				MOV	EBX, currElFrequency
 000002A4  89 1F					MOV	DWORD PTR [EDI], EBX
 000002A6  5B						POP	EBX

					
 000002A7			_finish:
 000002A7  5D				POP		EBP
 000002A8  5C				POP		ESP
 000002A9  C2 0008		RET 8	
 000002AC			countList ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/28/23 22:35:49
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

printElement . . . . . . . . . .	Proc
printMedian  . . . . . . . . . .	Proc
printNum . . . . . . . . . . . .	Proc
printSortedArray . . . . . . . .	Proc
printSpace . . . . . . . . . . .	Proc
printTestArray . . . . . . . . .	Proc
setZero  . . . . . . . . . . . .	Proc
sourceElementToEAX . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000953 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000219 _TEXT	Length= 00000093 Public STDCALL
  _displayCountTitle . . . . . .	L Near	 00000219 _TEXT	
  _accessBasePointer . . . . . .	L Near	 00000228 _TEXT	
  _initializeVariables . . . . .	L Near	 0000022C _TEXT	
  _annotateFrequency . . . . . .	L Near	 00000255 _TEXT	
  _resetCurrFrequencyCount . . .	L Near	 0000025D _TEXT	
  _appendElementToFreqCount  . .	L Near	 0000025D _TEXT	
  _incrementCurrFrequency  . . .	L Near	 0000027E _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000284 _TEXT	
  _appendLastElFrequency . . . .	L Near	 0000029D _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000002A7 _TEXT	
displayArray . . . . . . . . . .	P Near	 00000153 _TEXT	Length= 0000005A Public STDCALL
  _loadArrayRequirements . . . .	L Near	 00000157 _TEXT	
  _printIteratively  . . . . . .	L Near	 0000016D _TEXT	
  _createNewLineConditionally  .	L Near	 00000183 _TEXT	
  _loopPrint . . . . . . . . . .	L Near	 000001A1 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000001A3 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 00000051 Public STDCALL
  _divideARRAYSIZEbyTwoFlored  .	L Near	 000001D6 _TEXT	
  _printMedianMessage  . . . . .	L Near	 000001FB _TEXT	
  _printMedian . . . . . . . . .	L Near	 00000205 _TEXT	
  _finsh . . . . . . . . . . . .	L Near	 00000214 _TEXT	
exchangeElements . . . . . . . .	P Near	 000001AD _TEXT	Length= 0000001B Public STDCALL
  _useTemptsToSwitchElements . .	L Near	 000001B7 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 00000131 _TEXT	Length= 00000022 Public STDCALL
  _appendElements  . . . . . . .	L Near	 0000013B _TEXT	
  _getRandomNumber . . . . . . .	L Near	 0000013B _TEXT	
  _addElementToArray . . . . . .	L Near	 0000014B _TEXT	
gnomeSort  . . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 0000006C Public STDCALL
  _storeRegisters  . . . . . . .	L Near	 000000C5 _TEXT	
  _accesArgument . . . . . . . .	L Near	 000000C9 _TEXT	
  _lastArrayIndexToESI . . . . .	L Near	 000000D2 _TEXT	
  _iterateSortAlgorithm  . . . .	L Near	 000000F9 _TEXT	
  _incrementZeroIndex  . . . . .	L Near	 000000F9 _TEXT	
  _cmpTwinIndices  . . . . . . .	L Near	 00000104 _TEXT	
  _configureIndexDecrement . . .	L Near	 00000104 _TEXT	
  _cmpElementSizes . . . . . . .	L Near	 00000109 _TEXT	
  _swapElements  . . . . . . . .	L Near	 0000010F _TEXT	
  _incrmentIndex . . . . . . . .	L Near	 0000011D _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000124 _TEXT	
  _cmpLastIndex  . . . . . . . .	L Near	 00000124 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 0000012C _TEXT	
introduction . . . . . . . . . .	P Near	 0000009C _TEXT	Length= 00000029 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000008C Public STDCALL
  _getRandomArray  . . . . . . .	L Near	 00000005 _TEXT	
  _displayRandomArrayTitle . . .	L Near	 0000000F _TEXT	
  _displayRandomArray  . . . . .	L Near	 0000001E _TEXT	
  _sortRandomArray . . . . . . .	L Near	 0000002D _TEXT	
  _displaySortedTitle  . . . . .	L Near	 00000037 _TEXT	
  _displaySortedArray  . . . . .	L Near	 00000046 _TEXT	
  _displayMedian . . . . . . . .	L Near	 00000055 _TEXT	
  _displayFrequencies  . . . . .	L Near	 0000005F _TEXT	
  _displayFreqencyArar . . . . .	L Near	 0000006E _TEXT	
  _displayGoodByeMessage . . . .	L Near	 0000007B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProc . . . . . . . . . . . .	P Near	 0000008C _TEXT	Length= 00000010 Public STDCALL
  _displayFrequencies  . . . . .	L Near	 0000008C _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Eh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MedianMessage  . . . . . . . . .	Byte	 00000933 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROW_LENGTH . . . . . . . . . . .	Number	 00000014h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counts . . . . . . . . . . . . .	DWord	 000003A7 _DATA	
currElFrequencies  . . . . . . .	DWord	 000006CF _DATA	
currElFrequency  . . . . . . . .	DWord	 000006DF _DATA	
currEl . . . . . . . . . . . . .	DWord	 000006D7 _DATA	
currIndex  . . . . . . . . . . .	DWord	 000006D3 _DATA	
currentRowLength . . . . . . . .	DWord	 00000063 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elFrequenciesLength  . . . . . .	DWord	 000006C7 _DATA	
elFrequenciesOFFSET  . . . . . .	DWord	 000006CB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodBye  . . . . . . . . . . . .	Byte	 00000909 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArrayLength . . . . . . . .	DWord	 00000067 _DATA	
inputArrayOFFSET . . . . . . . .	DWord	 0000005F _DATA	
instancesTitle . . . . . . . . .	Byte	 000008B3 _DATA	
lastArrayIndex . . . . . . . . .	DWord	 0000039B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianElement  . . . . . . . . .	DWord	 000003A3 _DATA	
medianOFFSET . . . . . . . . . .	DWord	 0000039F _DATA	
no . . . . . . . . . . . . . . .	Byte	 00000048 _DATA	
numberRows . . . . . . . . . . .	DWord	 00000053 _DATA	
originalArrayOFFSET  . . . . . .	DWord	 00000397 _DATA	
procTitle  . . . . . . . . . . .	Byte	 000006E3 _DATA	
programInstructions  . . . . . .	Byte	 0000073A _DATA	
randomElOFFSET . . . . . . . . .	DWord	 000006DB _DATA	
randomElementsIndex  . . . . . .	DWord	 0000038B _DATA	
randomElements . . . . . . . . .	DWord	 0000006B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowIndex . . . . . . . . . . . .	DWord	 00000044 _DATA	
rowLength  . . . . . . . . . . .	DWord	 0000004F _DATA	
sortedTitle  . . . . . . . . . .	Byte	 00000895 _DATA	
space  . . . . . . . . . . . . .	DWord	 00000057 _DATA	
tempIndex  . . . . . . . . . . .	DWord	 0000038F _DATA	
tempValue  . . . . . . . . . . .	DWord	 00000393 _DATA	
testArrayLength  . . . . . . . .	DWord	 00000040 _DATA	
testArray  . . . . . . . . . . .	DWord	 00000000 _DATA	
unsortedTitle  . . . . . . . . .	Byte	 00000877 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yes  . . . . . . . . . . . . . .	Byte	 0000004B _DATA	

	   0 Warnings
	   0 Errors
