Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/27/23 22:51:04
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Fernando I. Rodriguez-Estrada	 
				; Last Modified: 5/27/2023
				; OSU email address: rodrifer@oregonstate.edu
				; Course number/section:   CS271 Section 40X
				; Project Number: 5	           Due Date: 5/28/2023
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACROS

				printTestArray MACRO
					PUSHAD

					PUSH	ARRAYSIZE
					PUSH	OFFSET testArray
					call	displayArray	
					call	CrlF

					POPAD
				ENDM

				;-----------------------------------------------------------------
				; Name: printElement 
				; 
				; prints the element along with a space.
				; 
				; Preconditions: address of index is passed as an argument.
				;
				; recieves
				; indexAddress = address of index.
				;
				; returns: NA
				;-----------------------------------------------------------------

				printElement MACRO element

					MOV		EAX, element
					call	WriteDec	

					MOV		EDX, OFFSET space
					call	Writestring


				ENDM

				;-----------------------------------------------------------------
				; Name: printSpace
				; 
				; prints the element along with a space.
				; 
				; Preconditions: address of index is passed as an argument.
				;
				; recieves
				; indexAddress = address of index.
				;
				; returns: NA
				;-----------------------------------------------------------------

				printSpace MACRO 

					PUSH	EDX
					MOV		EDX, OFFSET space
					call	Writestring
					POP		EDX

				ENDM

 = 00000014			ROW_LENGTH = 20

				; fillArray PROC
 = 00000014			LO = 20
 = 0000001E			HI = 30
 = 00000064			ARRAYSIZE = 100 

				; (insert constant definitions here)

 00000000			.data

 00000000  00000064 [		testArray				DWORD		ARRAYSIZE DUP(30)
	    0000001E
	   ]
 00000190 00000064		testArrayLength		    DWORD       LENGTHOF testArray  
 00000194 00000000		rowIndex				DWORD		?	
 00000198 4E 6F 00		no						BYTE		"No", 0
 0000019B 79 65 73 00		yes						BYTE		"yes",	0


				; displayArray
 0000019F 00000014		rowLength				DWORD		20
 000001A3 00000000		numberRows				DWORD		?
 000001A7 00000020		space					DWORD		' ', 0
	   00000000
 000001AF 00000000		inputArrayOFFSET		DWORD		?
 000001B3 00000001		currentRowLength		DWORD		1
 000001B7 00000000		inputArrayLength		DWORD		?

				; fillArray
 000001BB  00000064 [		randomElements			DWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000034B 00000000		randomElementsIndex		DWORD		?

				; exchangeElements	
 0000034F 00000000		tempIndex				DWORD		? 
 00000353 00000000		tempValue				DWORD		?

				; gnomeSort
 00000357 00000000		originalArrayOFFSET		DWORD		?
 0000035B 00000000		lastArrayIndex			DWORD		?

					
 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call	Randomize
 00000005  E8 000000AD			call	fillArray
 0000000A  E8 00000007			call	testProc


					Invoke ExitProcess,0	; exit to operating system
 0000000F  6A 00	   *	    push   +000000000h
 00000011  E8 00000000 E   *	    call   ExitProcess
 00000016			main ENDP

				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: procedureName
				;
				; Description:
				;
				; Preconditions:
				;
				; Postconditions:
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 00000016			testProc PROC

 00000016  B8 00000000 R		MOV		EAX, OFFSET testArray
 0000001B  E8 00000000 E		call	WriteDec
 00000020  E8 00000000 E		call	CrLf
 00000025  B8 00000064			MOV		EAX, ARRAYSIZE
 0000002A  E8 00000000 E		call	WriteDec
 0000002F  E8 00000000 E		Call	CrLf

 00000034  68 00000000 R		PUSH	OFFSET testArray
 00000039  6A 64			PUSH	ARRAYSIZE
 0000003B  E8 00000099			call	displayArray

 00000040  C3			RET
 00000041			testPROC ENDP

				; ---------------------------------------------------------------------------------
				; Name: gnomeSort
				;
				; Description: implement gnome sorting algorithm.
				;
				; Preconditions: OFFSET inputArray is pushed the runtime stack.
				;
				; Postconditions: 
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 00000041			gnomeSort PROC
 00000041			_storeRegisters:
 00000041  54				PUSH	ESP
 00000042  55				PUSH	EBP
 00000043  8B EC			MOV		EBP, ESP

 00000045			_accesArgument:
 00000045  8B 7D 0C			MOV		EDI, [EBP+12]
 00000048  89 3D 00000357 R		MOV		originalArrayOFFSET, EDI

 0000004E			_lastArrayIndexToESI:
 0000004E  8B 35 00000357 R			MOV		ESI, originalArrayOFFSET
						
 00000054  53					PUSH	EBX 
				;-------------------------------------------------
				;	ESI = ARRAYSIZE * 4 + originalArrayOFFSSET
				; -------------------------------------------------
 00000055  BB 00000064				MOV		EBX, ARRAYSIZE
 0000005A  8B C3				MOV		EAX, EBX
 0000005C  B8 00000004				MOV		EAX, 4
 00000061  F7 E3				MUL		EBX 
 00000063  8B D8				MOV		EBX, EAX
 00000065  03 F3				ADD		ESI, EBX
 00000067  89 35 0000035B R			MOV		lastArrayIndex, ESI

 0000006D  5B					POP		EBX 
					
 0000006E			_iterateSortAlgorithm:

 0000006E  60				PUSHAD
 0000006F  6A 64			PUSH	ARRAYSIZE	
 00000071  68 00000000 R		PUSH	OFFSET testArray
 00000076  E8 0000005E			call	displayArray
 0000007B  E8 00000000 E		call	CrlF
 00000080  61				POPAD	
					; ---------------------------------------------
					; if ESI == 0: ESI += 4
					; else: continue 
					; ---------------------------------------------
 00000081				_incrementZeroIndex:
 00000081  3B 3D 00000357 R			CMP		EDI, originalArrayOFFSET
 00000087  75 03				JNE		_cmpTwinIndices	
 00000089  83 C7 04				ADD		EDI, 4
 0000008C				_cmpTwinIndices:
						
 0000008C					_configureIndexDecrement:
 0000008C  8B C7					MOV		EAX, EDI
 0000008E  83 E8 04					SUB		EAX, 4						; EAX = currIndex - 4

 00000091					_cmpElementSizes:
 00000091  8B 1F					MOV		EBX, [EDI]
 00000093  39 18					CMP		[EAX], EBX
 00000095  7E 0C					JLE		_incrmentIndex	

 00000097					_swapElements:
 00000097  50						PUSH	EAX
 00000098  57						PUSH	EDI	
 00000099  E8 00000083					call	exchangeElements
					
 0000009E  83 EF 04					SUB		EDI, 4
 000000A1  EB 07					JMP		_continue
 000000A3					_incrmentIndex:		
 000000A3  8B C7					MOV		EAX, EDI
 000000A5  83 C7 04					ADD		EDI, 4
 000000A8  8B C7					MOV		EAX, EDI


 000000AA				_continue:
 000000AA					_cmpLastIndex:
							; ----------------------------------------------
							; if currenIndex < finalIndex: JMP _iterateSortAlgorithm 
							; ----------------------------------------------
 000000AA  39 3D 0000035B R				CMP		lastArrayIndex, EDI
 000000B0  7D BC					JGE		_iterateSortAlgorithm

 000000B2				_finish:	
 000000B2  5D				POP		EBP
 000000B3  5C				POP		ESP
 000000B4  C2 0004		RET	4
 000000B7			gnomeSort ENDP


				; ---------------------------------------------------------------------------------
				; Name: fillArray		
				;
				; Description: fills the array with random elements between the two specified bounds
				;
				; Preconditions: LO, HI, and ARRAY_SIZE are declared in the data segment
				; array address is declared in .data, and arrayAddress OFFSET is pushed to the PROC. 
				; Registers modified: EAX, ECX, and ESI.
				;
				; Postconditions: EAX is modified; new array holds values
				;
				; Returns:
				;
				; ---------------------------------------------------------------------------------

 000000B7			fillArray PROC	

 000000B7  BE 000001BB R		MOV		ESI, OFFSET randomElements			; ESI = index of randomElements
 000000BC  B9 00000064			MOV		ECX, ARRAYSIZE	
 000000C1			_appendElements:
				; --------------------------
				; get randomNumber betweenm [LO, HI]
				; EAX = randomeNumber
				; --------------------------
 000000C1			_getRandomNumber:
 000000C1  B8 0000001E			MOV		EAX, HI
 000000C6  40				INC		EAX
 000000C7  E8 00000000 E		call	RandomRange
					; if randomNumber < LO: JMP _getRandomNumber
 000000CC  83 F8 14			CMP		EAX, LO	
 000000CF  72 F0			JB		_getRandomNumber					; EAX = randomNumber

				; --------------------------
				; add element to randomElements Array 
				; --------------------------
 000000D1			_addElementToArray:	
 000000D1  89 06			MOV		[ESI], EAX							; randomElements[ESI] = randomNumebr
 000000D3  83 C6 04			ADD		ESI, 4
 000000D6  E2 E9			LOOP	_appendElements

 000000D8  C3			RET
 000000D9			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: procedureName
				;
				; Description: Prints 20 elements per row.
				;
				; Preconditions: array OFFSET and array length are pushed to stack, respectively.
				;
				; Postconditions: ADBS Modified registers are EAX, EDI, EBX, and ESI	
				;
				; Returns: NA
				;
				; ---------------------------------------------------------------------------------
 000000D9			displayArray PROC
 000000D9  54				PUSH	ESP
 000000DA  55				PUSH	EBP	
 000000DB  8B EC			MOV		EBP, ESP

 000000DD			_loadArrayRequirements:		
 000000DD  8B 75 10			MOV		ESI, [EBP+16]				; ESI = inputArrayOFFSET
 000000E0  8B 4D 0C			MOV		ECX, [EBP+12]				; ECX = number of elements	
 000000E3  BB 00000014			MOV		EBX, ROW_LENGTH
							
 000000E8			_printIteratively:	
					printElement [ESI]	
 000000E8  8B 06	     1		MOV		EAX, [ESI]
 000000EA  E8 00000000 E     1		call	WriteDec	
 000000EF  BA 000001A7 R     1		MOV		EDX, OFFSET space
 000000F4  E8 00000000 E     1		call	Writestring
 000000F9  83 C6 04			ADD		ESI, 4
					
 000000FC				_createNewLineConditionally:
 000000FC  FF 05 000001B3 R			INC		currentRowLength
 00000102  3B 1D 000001B3 R			CMP		EBX, currentRowLength 
 00000108  7D 10				JGE		_loopPrint 

 0000010A  E8 00000000 E			call	CrLf			
 0000010F  BA 00000001				MOV		EDX, 1
 00000114  89 15 000001B3 R			MOV		currentRowLength, EDX

					
 0000011A				_loopPrint:
 0000011A  E2 CC			LOOP	_printIteratively
					
 0000011C			_displayElement:	
 0000011C  5D				POP		EBP
 0000011D  5C				POP		ESP
					
 0000011E  C2 0008		RET		8
 00000121			displayArray ENDP

 00000121			exchangeElements PROC	
 00000121  54				PUSH	ESP	
 00000122  55				PUSH	EBP	
 00000123  8B EC			MOV		EBP, ESP

 00000125  8B 75 0C			MOV		ESI, [EBP+12]							; ESI = indexOne
 00000128  8B 7D 10			MOV		EDI, [EBP+16]							; EDI = indexTwo

 0000012B  A5				MOVSD					

 0000012C  5D				POP		EBP
 0000012D  5C				POP		ESP
 0000012E  C2 0008		RET	8
 00000131			exchangeElements ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/27/23 22:51:04
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

printElement . . . . . . . . . .	Proc
printSpace . . . . . . . . . . .	Proc
printTestArray . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000035F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000131 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 000000D9 _TEXT	Length= 00000048 Public STDCALL
  _loadArrayRequirements . . . .	L Near	 000000DD _TEXT	
  _printIteratively  . . . . . .	L Near	 000000E8 _TEXT	
  _createNewLineConditionally  .	L Near	 000000FC _TEXT	
  _loopPrint . . . . . . . . . .	L Near	 0000011A _TEXT	
  _displayElement  . . . . . . .	L Near	 0000011C _TEXT	
exchangeElements . . . . . . . .	P Near	 00000121 _TEXT	Length= 00000010 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 00000022 Public STDCALL
  _appendElements  . . . . . . .	L Near	 000000C1 _TEXT	
  _getRandomNumber . . . . . . .	L Near	 000000C1 _TEXT	
  _addElementToArray . . . . . .	L Near	 000000D1 _TEXT	
gnomeSort  . . . . . . . . . . .	P Near	 00000041 _TEXT	Length= 00000076 Public STDCALL
  _storeRegisters  . . . . . . .	L Near	 00000041 _TEXT	
  _accesArgument . . . . . . . .	L Near	 00000045 _TEXT	
  _lastArrayIndexToESI . . . . .	L Near	 0000004E _TEXT	
  _iterateSortAlgorithm  . . . .	L Near	 0000006E _TEXT	
  _incrementZeroIndex  . . . . .	L Near	 00000081 _TEXT	
  _cmpTwinIndices  . . . . . . .	L Near	 0000008C _TEXT	
  _configureIndexDecrement . . .	L Near	 0000008C _TEXT	
  _cmpElementSizes . . . . . . .	L Near	 00000091 _TEXT	
  _swapElements  . . . . . . . .	L Near	 00000097 _TEXT	
  _incrmentIndex . . . . . . . .	L Near	 000000A3 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000000AA _TEXT	
  _cmpLastIndex  . . . . . . . .	L Near	 000000AA _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000000B2 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000016 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProc . . . . . . . . . . . .	P Near	 00000016 _TEXT	Length= 0000002B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000064h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Eh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROW_LENGTH . . . . . . . . . . .	Number	 00000014h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentRowLength . . . . . . . .	DWord	 000001B3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArrayLength . . . . . . . .	DWord	 000001B7 _DATA	
inputArrayOFFSET . . . . . . . .	DWord	 000001AF _DATA	
lastArrayIndex . . . . . . . . .	DWord	 0000035B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
no . . . . . . . . . . . . . . .	Byte	 00000198 _DATA	
numberRows . . . . . . . . . . .	DWord	 000001A3 _DATA	
originalArrayOFFSET  . . . . . .	DWord	 00000357 _DATA	
randomElementsIndex  . . . . . .	DWord	 0000034B _DATA	
randomElements . . . . . . . . .	DWord	 000001BB _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowIndex . . . . . . . . . . . .	DWord	 00000194 _DATA	
rowLength  . . . . . . . . . . .	DWord	 0000019F _DATA	
space  . . . . . . . . . . . . .	DWord	 000001A7 _DATA	
tempIndex  . . . . . . . . . . .	DWord	 0000034F _DATA	
tempValue  . . . . . . . . . . .	DWord	 00000353 _DATA	
testArrayLength  . . . . . . . .	DWord	 00000190 _DATA	
testArray  . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yes  . . . . . . . . . . . . . .	Byte	 0000019B _DATA	

	   0 Warnings
	   0 Errors
